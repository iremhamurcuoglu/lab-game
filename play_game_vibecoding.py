# -*- coding: utf-8 -*-
"""play game-vibecoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19vmR-iy91Tf9qs8ff5DtT6T-03zgN1w8
"""

# app.py
# Çalıştırma: streamlit run app.py (lokalde)
# Cloud'da: GitHub'a push → Streamlit Community Cloud "New app"

import random
from typing import List, Tuple
import streamlit as st

# =========================
# 1) OYUN SABİTLERİ
# =========================
MAZE_W, MAZE_H = 25, 15
GOLD_COUNT = 18
STEP_LIMIT = 250
SEED = None

WALL  = '#'
FLOOR = '·'
PLAYER = '@'
GOLD  = '★'   # kare görünürse 'G' yapabilirsin

# =========================
# 2) 🔴 BURAYA SENİN OYUN MANTIĞIN
#    (labirent üretimi, hareket, vb.)
# =========================
def in_bounds(x, y, w, h):
    return 0 <= x < w and 0 <= y < h

def neighbors_cells(x, y):
    return [(x, y-2), (x, y+2), (x-2, y), (x+2, y)]

def carve_passage(maze: List[List[str]], start: Tuple[int,int]):
    stack = [start]
    w, h = len(maze[0]), len(maze)
    while stack:
        x, y = stack[-1]
        maze[y][x] = FLOOR
        nbrs = neighbors_cells(x, y)
        random.shuffle(nbrs)
        moved = False
        for nx, ny in nbrs:
            if in_bounds(nx, ny, w, h) and maze[ny][nx] == WALL:
                wx, wy = (x + nx)//2, (y + ny)//2
                maze[wy][wx] = FLOOR
                maze[ny][nx] = FLOOR
                stack.append((nx, ny))
                moved = True
                break
        if not moved:
            stack.pop()

def make_maze(w: int, h: int) -> List[List[str]]:
    if w % 2 == 0: w -= 1
    if h % 2 == 0: h -= 1
    m = [[WALL for _ in range(w)] for _ in range(h)]
    carve_passage(m, (1, 1))
    return m

def empty_cells(maze):
    cells = []
    for y, row in enumerate(maze):
        for x, ch in enumerate(row):
            if ch == FLOOR:
                cells.append((x, y))
    return cells

def place_items(maze, symbol, count, forbid=set()):
    cells = [c for c in empty_cells(maze) if c not in forbid]
    random.shuffle(cells)
    placed = []
    for i in range(min(count, len(cells))):
        x, y = cells[i]
        maze[y][x] = symbol
        placed.append((x, y))
    return placed

def count_gold(maze):
    return sum(row.count(GOLD) for row in maze)

def move_if_possible(maze, px, py, dx, dy):
    nx, ny = px + dx, py + dy
    w, h = len(maze[0]), len(maze)
    if not in_bounds(nx, ny, w, h):            # sınır
        return px, py, 0
    if maze[ny][nx] == WALL:                   # duvar
        return px, py, 0
    gain = 0
    if maze[ny][nx] == GOLD:                   # altın
        gain = 10
        maze[ny][nx] = FLOOR
    return nx, ny, gain

def render_map(maze, px, py) -> str:
    rows = []
    for y, row in enumerate(maze):
        line = []
        for x, ch in enumerate(row):
            if (x, y) == (px, py):
                line.append(PLAYER)
            else:
                line.append(ch)
        rows.append("".join(line))
    return "\n".join(rows)

def init_game(seed=None):
    if seed is not None:
        random.seed(seed)
    maze = make_maze(MAZE_W, MAZE_H)
    start = random.choice(empty_cells(maze))
    px, py = start
    place_items(maze, GOLD, GOLD_COUNT, forbid={start})
    state = {
        "maze": maze,
        "px": px, "py": py,
        "score": 0,
        "steps_left": STEP_LIMIT,
        "game_over": False,
        "win": False,
    }
    return state

# =========================
# 3) UI (STREAMLIT)
# =========================
st.set_page_config(page_title="Labirent Altın Oyunu", page_icon="✨")
st.title("✨ Labirent Altın Avı — Web Sürümü")
st.caption("W/A/S/D ile veya yön butonlarıyla hareket et. Tüm altınları topla!")

# Session state yoksa başlat
if "maze" not in st.session_state:
    st.session_state.update(init_game(SEED))

# Üst panel
c1, c2, c3, c4 = st.columns(4)
c1.metric("Skor", st.session_state["score"])
c2.metric("Kalan Adım", st.session_state["steps_left"])
c3.metric("Kalan Altın", count_gold(st.session_state["maze"]))
seed_str = c4.text_input("Seed (opsiyonel)", value=str(SEED) if SEED is not None else "")

# Harita (monospace)
map_str = render_map(st.session_state["maze"], st.session_state["px"], st.session_state["py"])
st.markdown(
    f"<pre style='font-size:16px; line-height:1.0; padding:12px; background:#0b1021; color:#e8eaf6; border-radius:12px; overflow:auto;'>{map_str}</pre>",
    unsafe_allow_html=True
)

# Tek hamlelik hareket
def do_move(dx, dy):
    if st.session_state["game_over"]:
        return
    nx, ny, gain = move_if_possible(
        st.session_state["maze"],
        st.session_state["px"],
        st.session_state["py"],
        dx, dy
    )
    if (nx, ny) != (st.session_state["px"], st.session_state["py"]):
        st.session_state["px"], st.session_state["py"] = nx, ny
        st.session_state["score"] += gain
        st.session_state["steps_left"] -= 1

    # bitiş
    if count_gold(st.session_state["maze"]) == 0:
        st.session_state["game_over"] = True
        st.session_state["win"] = True
    elif st.session_state["steps_left"] <= 0:
        st.session_state["game_over"] = True
        st.session_state["win"] = False

# Buton kontrolleri
st.write("### Kontroller")
bx1, bx2, bx3 = st.columns([1,1,1])
with bx2:
    st.button("⬆️ Yukarı (W)", use_container_width=True, on_click=lambda: do_move(0,-1))
brow = st.columns([1,1,1])
with brow[0]:
    st.button("⬅️ Sol (A)", use_container_width=True, on_click=lambda: do_move(-1,0))
with brow[2]:
    st.button("➡️ Sağ (D)", use_container_width=True, on_click=lambda: do_move(1,0))
bx4, bx5, bx6 = st.columns([1,1,1])
with bx5:
    st.button("⬇️ Aşağı (S)", use_container_width=True, on_click=lambda: do_move(0,1))

# Klavye (w/a/s/d) — Enter ile
key_in = st.text_input("Klavye ile oyna (w/a/s/d yaz ve Enter'a bas):", value="", max_chars=1)
key_in = key_in.strip().lower()
if key_in in ["w","a","s","d"]:
    if key_in == "w": do_move(0,-1)
    if key_in == "s": do_move(0, 1)
    if key_in == "a": do_move(-1,0)
    if key_in == "d": do_move(1, 0)
    st.session_state["__tick__"] = st.session_state.get("__tick__", 0) + 1
    st.experimental_rerun()

# Son durum mesajı
if st.session_state["game_over"]:
    if st.session_state["win"]:
        st.success(f"🎉 Tüm altınları topladın! Final Skorun: {st.session_state['score']}")
    else:
        st.error(f"⏳ Adımlar bitti. Toplanan Altın: {st.session_state['score'] // 10} | Final Skor: {st.session_state['score']}")

# Yeni Oyun / Rastgele
colr1, colr2 = st.columns(2)
with colr1:
    if st.button("🔁 Yeni Oyun (aynı seed)", use_container_width=True):
        s = None
        if seed_str.strip().isdigit():
            s = int(seed_str.strip())
        st.session_state.update(init_game(s))
        st.experimental_rerun()
with colr2:
    if st.button("🎲 Rastgele Labirent (yeni seed)", use_container_width=True):
        st.session_state.update(init_game(None))
        st.experimental_rerun()

